<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chapter 4 Client APIs -->
        <!-- next available id is 4035 -->
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4000</id>
			<description>
Conformance (Service completeness): A Service implementation MUST be capable of creating proxies, Dispatch instances, and new ports.
			</description>
			<location chapter = "4" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4001</id>
			<description>
Conformance (Service Creation Failure): If a create method fails to create a service object, it MUST throw WebServiceException. The cause of that exception SHOULD be set to an exception that provides more information on the cause of the error (e.g. an IOException).
			</description>
			<location chapter = "4" section = "1.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4002</id>
			<description>
Conformance (Use of Executor): If an executor object is successfully configured for use by a Service via the setExecutor method, then subsequent asynchronous callbacks MUST be delivered using the specified executor. Calls that were outstanding at the time the setExecutor method was called MAY use the previously set executor, if any.
			</description>
			<location chapter = "4" section = "1.4"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4003</id>
                    <description>
                        Conformance (Default Executor): Lacking an application-specified executor, an implementation MUST use its own executor, a java.util.concurrent.ThreadPoolExecutor or analogous mechanism, to deliver callbacks. An implementation MUST NOT use application-provided threads to deliver callbacks, e.g. by borrowing them when the application invokes a remote operation.
                    </description>
                    <location chapter = "4" section = "1.4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4022</id>
                    <description>
                        Conformance (Required BindingProvider getEndpointReference): An implementation MUST be able to return an jakarta.xml.ws.EndpointReference for the target endpoint if a SOAP binding is being used.  
                    </description>
                    <location chapter="4" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4023</id>
                    <description>
                        If the BindingProvider instance has a binding that is either SOAP 1.1/HTTP or SOAP
1.2/HTTP, then a W3CEndpointReference MUST be returned.
                    </description>
                    <location chapter="4" section="2"/>
                </assertion>
                <assertion required="false" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:4029</id>
                    <description>
                        The wsam:InterfaceName MAY be present in the wsa:Metdata.
                    </description>
                    <location chapter="4" section="2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4024</id>
                    <description>
                        If the binding is XML/HTTP an java.lang.UnsupportedOperationException MUST be thrown.
                    </description>
                    <location chapter="4" section="2"/>
                </assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4004</id>
                    <description>
                        Conformance (Message context decoupling): Modifications to the request context while previously invoked operations are in-progress MUST NOT affect the contents of the message context for the previously invoked operations.
                    </description>
                    <location chapter = "4" section = "2.1"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4005</id>
			<description>
Conformance (Required BindingProvider properties): An implementation MUST support all properties shown as mandatory in table 4.1.
			</description>
			<location chapter = "4" section = "2.1.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4006</id>
			<description>
Conformance (OptionalBindingProvider properties): An implementation MAY support the properties shown as optional in table 4.1.
			</description>
			<location chapter = "4" section = "2.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4007</id>
			<description>
Conformance (Additional context properties): Implementations MAY define additional implementation 
specific properties not listed in table 4.1. The java.* and javax.* namespaces are reserved for use by Java specifications.
			</description>
			<location chapter = "4" section = "2.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4008</id>
			<description>
Conformance Requirement (Asynchronous response context): The local response context of a BindingProvider instance MUST NOT be updated on completion of an asynchronous operation, instead the response context MUST be made available via a Response instance.
			</description>
			<location chapter = "4" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4009</id>
			<description>
Conformance (Proxy support): An implementation MUST support proxies.
			</description>
			<location chapter = "4" section = "2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4010</id>
			<description>
Conformance (ImplementingBindingProvider ): An instance of a proxy MUST implement jakarta.xml.ws.BindingProvider.
			</description>
			<location chapter = "4" section = "2.3"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4011</id>
                    <description>
                        Conformance (Service.getPort failure): If creation of a proxy fails, an implementation MUST throw jakarta.xml.ws.WebServiceException. The cause of that exception SHOULD be set to an exception that provides more information on the cause of the error (e.g. an IOException).
                    </description>
                    <location chapter = "4" section = "2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4025</id>
                    <description>
                        Add the following getPort method to the methods of a Service instance.
                        T getPort(Class&lt;T&gt; sei, WebServiceFeatures... features) Returns a proxy for the specified sei, the Service instance is responsible for selecting the port (protocol binding and and endpoint address).  The specified features MUST be enabled/disabled and configured as specified.
                    </description>
                    <location chapter="4" section="2.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4026</id>
                    <description>
                        Add the following getPort method to the methods of a Service instance.
                        T getPort(QName port, Class&lt;T&gt; sei, WebServiceFeatures... features) Returns a proxy for the endpoint specified by port. Note that the namespace component of port is the target namespace of the WSDL definition document. The specified features MUST be enabled/disabled and configured as specified.
                    </description>
                    <location chapter="4" section="2.3"/>
                </assertion>
                
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4027</id>
                    <description>
                        Add the following getPort method to the methods of a Service instance.
                        T getPort(EndpointReference epr Class&lt;T&gt; sei, WebServiceFeatures... features) Returns a proxy for the endpoint specified by epr. The address stored in the epr MUST be used during invocations on the endpoint. 
                    </description>
                    <location chapter="4" section="2.3"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.1</id>
                            <description>The endpointReference MUST NOT be used as the value of any addressing header such as wsa:ReplyTo. 
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.2</id>
                            <description>The specified features MUST be enabled/disabled and configured as specified.
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:4027.3</id>
                            <description>The epr's wsam:ServiceName MUST match the Service instance's ServiceName, otherwise a WebServiceExeption MUST be thrown.  
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:4027.4</id>
                            <description>The epr's wsam:EndpointName MUST match the PortName for the sei, otherwise a WebServiceException MUST be thrown.  
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.7</id>
                            <description>Any JAX-WS supported epr metadata MUST match the Service instances ServiceName, otherwise a WebServiceExeption MUST be thrown.
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.8</id>
                            <description>Any JAX-WS supported epr metadata MUST match the PortName for the sei, otherwise a WebServiceException MUST be
thrown.
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.5</id>
                            <description>If the Service instance has an associated WSDL, its WSDL MUST be used to determine any binding information, any WSDL in the epr will be ignored.  
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.6</id>
                            <description>If the Service instance does not have a WSDL, then any WSDL inlined in the JAX-WS supported metadata of the epr MUST be used to determine binding information.
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4027.9</id>
                            <description>If there is not enough metadata in the Service instance or in the epr metadata to determine a port, then a WebServiceException MUST be thrown.
                            </description>
                            <location chapter = "4" section = "2.3"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4012</id>
                    <description>
                        Conformance (Remote Exceptions): If an error occurs during a remote operation invocation, an implemention MUST throw a service specific exception if possible. If the error cannot be mapped to a service specific exception, an implementation MUST throw a ProtocolException or one of its subclasses, as appropriate for the binding in use. See section 6.4.1 for more details.
                    </description>
                    <location chapter = "4" section = "2.4"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4021</id>
			<description>
Conformance (Exceptions During Handler Processing): Exceptions thrown during handler processing on the client MUST be passed on to the application. If the exception in question is a subclass of WebService Exception then an implementation MUST rethrow it as-is, without any additional wrapping, otherwise it MUST throw a WebServiceExceptionwhose cause is set to the exception that was thrown during handler processing.
			</description>
			<location chapter = "4" section = "2.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4013</id>
			<description>
Conformance (Other Exceptions): For all other errors, i.e. all those that don't occur as part of a remote invocation or handler processing, an implementation MUST throw a WebServiceException whose cause is the original local exception that was thrown, if any.
			</description>
			<location chapter = "4" section = "2.4"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4014</id>
                    <description>
                        Conformance (Dispatch support): Implementations MUST support the jakarta.xml.ws.Dispatch interface.
                    </description>
                    <location chapter = "4" section = "3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4030</id>
                    <description>
                        A JAX-WS implementation MUST honor all WebServiceFeatures (section 6.5) for Dispatch based applications.
                    </description>
                    <location chapter="4" section="3"/>            
                </assertion>  
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4015</id>
                    <description>
                        Conformance Requirement (Failed Dispatch.invoke ): When an operation is invoked using an invoke method, an implementation MUST throw a WebServiceException if there is any error in the configuration of the Dispatch instance or a java.rmi.RemoteException if an error occurs during the remote operation invocation.
                    </description>
                    <location chapter = "4" section = "3.2"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4016</id>
			<description>
Conformance Requirement (Failed Dispatch.invokeAsync ): When an operation is invoked using an invokeAsync method, an implementation MUST throw a WebServiceException if there is any error in the configuration of the Dispatch instance. Errors that occur during the invocation are reported when the client attempts to retrieve the results of the operation.
			</description>
			<location chapter = "4" section = "3.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4017</id>
			<description>
Conformance Requirement (Failed Dispatch.invokeOneWay ): When an operation is invoked using an invokeOneWay method, an implementation MUST throw a WebServiceException if there is any error in the configuration of the Dispatch instance or if an error is detected1 during the remote operation invocation.
			</description>
			<location chapter = "4" section = "3.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4018</id>
			<description>
Conformance Requirement (Reporting asynchronous errors): An implementation MUST throw a java.util.concurrent.ExecutionException from Response.get if the operation invocation failed.
			</description>
			<location chapter = "4" section = "3.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4019</id>
			<description>
Conformance Requirement (Marshalling failure): If an error occurs when using the supplied JAXBContext to marshall a request or unmarshall a response, an implementation MUST throw a WebServiceException whose cause is set to the original JAXBException.
			</description>
			<location chapter = "4" section = "3.4"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:4020</id>
                    <description>
                        Conformance (Use of the Catalog): In the process of resolving a URI that points to a WSDL document or any document reachable from it, a JAX-WS implementation MUST perform a URI resolution for it, as prescribed by the XML Catalogs 1.1 specification, using the catalog defined above as its entity catalog.
                    </description>
                    <location chapter = "4" section = "4"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:4028</id>
                    <description>
                        Section jakarta.xml.ws.EndpointReference 
                        getPort(Class&lt;T&gt; serviceEndpointInterface, 
                        WebServiceFeature... features) Gets a proxy for the serviceEndpointInterface that can be used to invoke operations on the endpoint referred to by the EndpointReference instance.  The specified features MUST be enabled/disabled and configured as specified.            
                    </description>
                    <location chapter="4" section="5"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4028.1</id>
                            <description>The returned proxy MUST use the EndpointReference instance to determine the endpoint address and any reference parameters to be sent on endpoint invocations.  
                            </description>
                            <location chapter = "4" section = "5"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4028.2</id>
                            <description>The EndpointReference instance MUST NOT be used directly as the value of an WS-Addressing header such as wsa:ReplyTo.
                            </description>
                            <location chapter = "4" section = "5"/>
                        </assertion>		
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4028.3</id>
                            <description>For this method to successfully return a proxy, WSDL metadata MUST be available and the EndpointReference instance MUST contain an implementation understood ServiceName in its metadata.
                            </description>
                            <location chapter = "4" section = "5"/>
                        </assertion>		
                    </sub-assertions>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4031</id>
			<description>
Dynamic case.

create(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) Returns a service object for the specified WSDL document and service name. The created service needs to be configured with the web service features.

create(QName serviceName, WebServiceFeature ... features) Returns a service object for a service with the given name. No WSDL document is attached to the service. The created service needs to be configured with the web service features.

    * Conformance (Service creation using features): The created service object must honor the web service features. If a JAX-WS implementation doesn't understand any passed-in feature, it must throw WebServiceException.
			</description>
			<location chapter = "4" section = "1.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4032</id>
			<description>
Static case.

When starting from a WSDL document, a concrete service implementation class MUST be generated as defined in section 2.7. The generated implementation class MUST have all the public constructors as shown in the example below.

When using the constructors, the default WSDL location and service name are implicitly taken from the WebServiceClient annotation that decorates the generated class.

The following code snippet shows the generated constructors:

// Generated Service Class

@WebServiceClient(name="StockQuoteService",
                  targetNamespace="http://example.com/stocks",
                  wsdlLocation="http://example.com/stocks.wsdl")
public class StockQuoteService extends jakarta.xml.ws.Service {
  public StockQuoteService() {
    super(new URL("http://example.com/stocks.wsdl"),
          new QName("http://example.com/stocks", "StockQuoteService"));
  }

  public StockQuoteService(WebServiceFeature ... features) {
    super(new URL("http://example.com/stocks.wsdl"),
          new QName("http://example.com/stocks", "StockQuoteService"),
	  features);
  }

  public StockQuoteService(URL wsdlLocation) {
    super(wsdlLocation,
          new QName("http://example.com/stocks", "StockQuoteService"));
  }

  public StockQuoteService(URL wsdlLocation, WebServiceFeature ... features) {
    super(wsdlLocation,
          new QName("http://example.com/stocks", "StockQuoteService"),
	  features);
  }

  public StockQuoteService(URL wsdlLocation, QName serviceName) {
    super(wsdlLocation, serviceName);
  }

  public StockQuoteService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
    super(wsdlLocation, serviceName, features);
  }

  ...
}
			</description>
			<location chapter = "4" section = "1.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4033</id>
			<description>
jakarta.xml.ws.BindingProvider

    * Conformance (BindingProvider's W3CEndpointReference): The returned W3CEndpointReference MUST contain wsam:ServiceName and wsam:ServiceName[@EndpointName] as per Addressing 1.0 - Metadata[35]. The wsam:InterfaceName MAY be present in the W3CEndpointReference. If there is an associated WSDL, then the WSDL location MUST be referenced using wsdli:wsdlLocation in the W3CEndpointReference's wsa:Metadata.  
			</description>
			<location chapter = "4" section = "2"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:4033.1</id>
                            <description>
Standard properties.

Add the following properties to Table 4.1: Standard BindingProvider properties.

Name                              Type              Mandatory Description
jakarta.xml.ws.addressing.to        EndpointReference  Y        If WS-Addressing
                                                              is enabled, this
							      value is used for 
							      wsa:To header
jakarta.xml.ws.addressing.replyto   EndpointReference  Y        If WS-Addressing
                                                              is enabled, this
							      value is used for
							      wsa:ReplyTo header
jakarta.xml.ws.addressing.faultto   EndpointReference  Y        If WS-Addressing
                                                              is enabled, this
							      value is used for
							      wsa:FaultTo
							      header
                            </description>
                            <location chapter = "4" section = "2"/>
                        </assertion>
                    </sub-assertions>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:4034</id>
			<description>
Proxies.
Proxy instances are not guaranteed to be thread safe. If the instances are
accessed by multiple threads, usual synchronization techniques can be used to support multiple threads.

The use of WS-Addressing requirements can be indicated in a WSDL as per Addressing 1.0 - Metadata[35]. A proxy created using getPort() calls is configured with the addressing requirements as specified in the associated WSDL or explicitly passing jakarta.xml.ws.soap.AddressingFeature web service feature.
    * Conformance (Proxy's Addressing use): A proxy MUST be configured with the use of addressing requirements as indicated in the associated WSDL. But if the proxy is created using jakarta.xml.ws.soap.AddressingFeature web service feature, the feature's addressing requirements MUST take precedence over WSDL's addressing requirements.
			</description>
			<location chapter = "4" section = "2.3"/>
		</assertion>
