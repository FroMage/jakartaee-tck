<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chapter 10 SOAP Binding -->
                <!-- next available id is 10028 -->
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:10000</id>
			<description>
Conformance Requirement (SOAP required roles): An implementation of the SOAP binding MUST act in the following roles: next and ultimate receiver.
			</description>
			<location chapter = "10" section = "1.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:10001</id>
			<description>
Conformance Requirement (SOAP required roles): An implementation of the SOAP binding MUST NOT act in the none role.
			</description>
			<location chapter = "10" section = "1.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10002</id>
			<description>Conformance Requirement (Default role visibility): An implementation MUST include the required next and ultimate receiver roles in the Set returned from SOAPBinding.getRoles.</description> 
			<location chapter = "10" section = "1.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10003</id>
			<description>Conformance Requirement (Default role persistence): An implementation MUST add the required next and ultimate receiver roles to the roles configured with SOAPBinding.setRoles.</description>
			<location chapter = "10" section = "1.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10004</id>
			<description>Conformance Requirement (None role error): An implementation MUST throw WebServiceException if a client attempts to configure the binding to play the none role via SOAPBinding.setRoles.</description>
			<location chapter = "10" section = "1.1.1"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:10005</id>
			<description>
Conformance (Incompatible handlers): An implementation MUST throw WebServiceException when, at the time a binding provider is created, the handler chain returned by the configured HandlerResolver contains an incompatible handler.
			</description>
			<location chapter = "10" section = "1.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10006</id>
			<description>Conformance Requirement (Incompatible handlers): Implementations MUST throw a WebServiceException when attempting to configure an incompatible handler using Binding.setHandlerChain.</description>
			<location chapter = "10" section = "1.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10007</id>
			<description>Conformance Requirement (Logical handler access): An implementation MUST allow access to the contents of the SOAP body via a logical message context.</description>
			<location chapter = "10" section = "1.1.2"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10008</id>
			<description>SOAP mustUnderstand Processing: The SOAP protocol binding performs the following additional processing on inbound SOAP messages prior to the start of normal handler invocation processing (see section 9.3.2). Refer to the SOAP specification[2, 3, 6 4] for a normative description of the SOAP processing model. This section is not intended to supercede any requirement stated within the SOAP specification, but rather to outline how the configuration information described above is combined to satisfy the SOAP requirements: 1. Obtain the set of SOAP roles for the current binding instance. This is returned by SOAPBinding.getRoles. 2. Obtain the set of Handlers deployed on the current binding instance. This is obtained via Binding.getHandlerChain. 3. Identify the set of header qualified names (QNames) that the binding instance understands. This is the set of all header QNames: (a) that are mapped to method parameters in the service endpoint interface, and (b) obtained from Handler.getHeaders() for each Handler in the set obtained in step 2. 4. Identify the set of must understand headers in the inbound message that are targeted at this node. This is the set of all headers with a mustUnderstand attribute whose value is 1 or true and an actor or role attribute whose value is in the set obtained in step 1. 5. For each header in the set obtained in step 4, the header is understood if its QName is in the set identified in step 3. 6. If every header in the set obtained in step 4 is understood, then the node understands how to process the message. Otherwise the node does not understand how to process the message. 7. If the node does not understand how to process the message, then neither handlers nor the endpoint are invoked and instead the binding generates a SOAPmust understand exception. Subsequent actions depend on whether the message exchange pattern (MEP) in use requires a response to the message currently being processed or not: Response The message direction is reversed and the binding dispatches the SOAP must understand exception (see section 10.2.2). No response The binding dispatches the SOAP must understand exception (see section 10.2.2).</description>
			<location chapter = "10" section = "2.1"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10009</id>
			<description>Handler Exceptions: A binding is responsible for catching runtime exceptions thrown by handlers and following the processing model described in section 9.3.2. A binding is responsible for converting the exception to a fault message subject to further handler processing if the following criteria are met: 1. A handler throws a ProtocolException from handleMessage, handleRequest or handleResponse2. The MEP in use includes a response to the message being processed 3. The current message is not already a fault message (the handler might have undertaken the work prior to throwing the exception). If the above criteria are met then the exception is converted to a SOAP fault message as follows: If the exception is an instance of SOAPFaultException then the fields of the exception are serialized 11 to a new SOAP fault message, see section 10.2.2.3. The current message is replaced by the new SOAP 12 fault message. If the exception is of any other type then a new SOAP fault message is created to reflect a server class of error for SOAP 1.1[2] or a receiver class of error for SOAP 1.2[3]. Handler processing is resumed as described in section 9.3.2. If the criteria for converting the exception to a fault message subject to further handler processing are not met then the exception is handled as follows depending on the current message direction: Outbound A new SOAP fault message is created to reflect a server class of error for SOAP 1.1[2] or a receiver class of error for SOAP 1.2[3] and the message is dispatched. Inbound The exception is passed to the binding provider.</description>
			<location chapter = "10" section = "2.2.1"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10010</id>
			<description>Mapping Exceptions to SOAP Faults: When mapping an exception to a SOAP fault, the fields of the fault message are populated according to the following rules of precedence: faultcode (Subcode in SOAP 1.2, Code set to env:Receiver) 1. SOAPFaultException.getFaultCode()1 2. env:Server (Subcode omitted for SOAP 1.2).faultstring (Reason/Text 1. SOAPFaultException.getFaultString()1 2. Exception.getMessage() 3. Exception.toString()faultactor (Role in SOAP 1.2) 1. SOAPFaultException.getFaultActor()1 2. Emptydetail (Detail in SOAP 1.2) 1. Serialized service specific exception (see WrapperException.getFaultInfo() in section 2.5) 2. SOAPFaultException.getDetail()1</description>
			<location chapter = "10" section = "2.2.3"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10011</id>
			<description>Conformance Requirement (SOAP 1.1 HTTP Binding Support): An implementation MUST support the HTTP binding of SOAP 1.1[2] and SOAP With Attachments[30] as clarified by the WS-I Basic Profile[17], WS-I Simple SOAP Binding Profile[28] and WS-I Attachment Profile[29].</description>
			<location chapter = "10" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10012</id>
			<description>Conformance Requirement (SOAP 1.2 HTTP Binding Support): An implementation MUST support the HTTP binding of SOAP 1.2[4].</description>
			<location chapter = "10" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10013</id>
			<description>Conformance Requirement (SOAP MTOM Support): An implementation MUST support SOAP MTOM[26].</description>
			<location chapter = "10" section = "4.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10022</id>
			<description>Conformance (Semantics of MTOM enabled): When MTOM is enabled, a receiver MUST accept both non-optimized and optimized messages, and a sender MAY send an optimized message, non-optimized messages being also acceptable.</description>
			<location chapter = "10" section = "4.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10014</id>
			<description>Conformance (MTOM support): Predefined SOAPBinding instances MUST support enabling/disabling MTOM support using the setMTOMenabled method.</description>
			<location chapter = "10" section = "4.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10023</id>
			<description>Conformance (SOAP bindings with MTOM disabled): The bindings corresponding to the following IDs: jakarta.xml.ws.soap.SOAPBinding.SOAP11HTTP BINDING and jakarta.xml.ws.soap.SOAPBinding.SOAP12HTTP BINDING MUST have MTOM disabled by default.</description>
			<location chapter = "10" section = "4.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10024</id>
			<description>Conformance (SOAP bindings with MTOM enabled): The bindings corresponding to the following IDs: jakarta.xml.ws.soap.SOAPBinding.SOAP11HTTP MTOM BINDING and jakarta.xml.ws.soap.SOAPBinding.SOAP12HTTP MTOM BINDING MUST have MTOM enabled by default.</description>
			<location chapter = "10" section = "4.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10015</id>
			<description>
Conformance (MTOM on Other SOAP Bindings): Other bindings that extend SOAPBinding MAY NOT support changing the value of the MTOMEnabled property. In this case, if an application attempts to change its value, an implementation MUST throw a WebServiceException.
			</description>
			<location chapter = "10" section = "4.1.1"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10016</id>
			<description>Conformance Requirement (One-way operations): When invoking one-way operations, an implementation of the SOAP/HTTP binding MUST block until the HTTP response is received or an error occurs.</description>
			<location chapter = "10" section = "4.1.2"/>
		</assertion>

                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:10025</id>
                    <description>
                        Addressing section:  If the jakarta.xml.ws.soap.AddressingFeature is enabled, implementations are required to follow WS-Addressing[32,33,34] protocols.
                    </description>
                    <location chapter="10" section="4.1.2"/>
                </assertion>
                
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:10026</id> <description>
                        Conformance (SOAP Addressing Support): An implementation MUST support WS-Addressing 1.0 SOAP Binding[34].   
                    </description>
                    <location chapter="10" section="4.1.2"/>
                </assertion>
       
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10017</id>
			<description>Conformance Requirement (HTTP basic authentication support): An implementation of the SOAP/HTTP binding MUST support HTTP basic authentication.</description>
			<location chapter = "10" section = "4.1.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10018</id>
			<description>Conformance Requirement (Authentication properties): A client side implementation MUST support use of the the standard properties jakarta.xml.ws.security.auth.usernameand jakarta.xml.ws.security.auth.password to configure HTTP basic authentication.</description>
			<location chapter = "10" section = "4.1.3"/>
		</assertion>

		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10019</id>
			<description>Conformance Requirement (URL rewriting support): An implementation MUST support use of HTTP URL rewriting for state management.</description>
			<location chapter = "10" section = "4.1.4"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10020</id>
			<description>Conformance Requirement (Cookie support): An implementation SHOULD support use of HTTP cookies for state management.</description>
			<location chapter = "10" section = "4.1.4"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10021</id>
			<description>Conformance Requirement (SSL session support): An implementation MAY support use of SSL session based state management.</description>
			<location chapter = "10" section = "4.1.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:10027</id>
			<description>If addressing is enabled, implementations are required to follow WS-Addressing[24][33][35] protocols.
    * Conformance (SOAP Addressing Support): An implementation MUST supportWS-Addressing 1.0 SOAP
Binding[33].

    * Conformance (wsa:Action value): wsa:Action value MUST be got from @Action annotation elements in SEI, if present. But if a client sets a BindingProvider.SOAPACTION_URI_PROPERTY then that MUST be used for wsa:Action header.

If a receiver receives messages with the WS-Addressing headers that are non-conformant as per WS-Addressing 1.0- SOAP Binding[33], then appropriate addressing pre-defined faults must be generated.

A JAX-WS application may send wsa:replyTo or wsa:FaultTo addressing header to receive non-anonymous responses at a different address other than the transport back channel. When the application receives a response at a different address, there is no standard way to communicate the response with the JAX-WS client runtime. Hence, there are no requirements on a JAX-WS client runtime to bind non-anonymous responses. A JAX-WS client runtime may start an endpoint to receive a non-anonymous response and may use the response to bind to the java parameters and return type. However, it is not required to do so.
			</description>
			<location chapter = "10" section = "4.1.5"/>
		</assertion>
