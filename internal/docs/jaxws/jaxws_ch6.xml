<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chapter Core Apis -->
        <!-- next available id is 6023 -->
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6000</id>
			<description>
Conformance Requirement (Read-only handler chains): An implementation MAY prevent changes to handler chains configured by some other means (e.g. via a deployment descriptor) by throwing UnsupportedOperationException from the setHandlerChain method of Binding
			</description>
			<location chapter = "6" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6001</id>
			<description>
Conformance (Concrete jakarta.xml.ws.spi.Provider required): An implementation MUST provide  a concrete class that extends jakarta.xml.ws.spi.Provider. Such a class MUST have a public constructor which takes no arguments.
			</description>
			<location chapter = "6" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6002</id>
			<description>
Conformance (Provider createAndPublishEndpoint Method): The effect of invoking the createAndPublishEndpoint method on a Provider MUST be the same as first invoking the createEndpoint method with the binding ID appropriate to the URL scheme used by the address, then invoking the publish-(String address) method on the resulting endpoint.
			</description>
			<location chapter = "6" section = "2.2"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6007</id>
                    <description>
                        createEndpoint(String bindingId, Object implementor)  Creates and returns an Endpoint for the specified binding and implementor. If the bindingId is null and no binding information is specified via the jakarta.xml.ws.BindingType annotation then a default SOAP1.1/HTTP binding MUST be used. 
                    </description>
                    <location chapter="6" section="2.2"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6018</id>
			<description>
createEndpoint(String bindingID, Object implementor, WebServiceFeature ...
features) Same as the above createEndpoint() method. The created Endpoint is configured with the web service features
			</description>
			<location chapter = "6" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6019</id>
			<description>
createEndpoint(String bindingId, Class implementorClass, Invoker invoker, WebServiceFeature ... features) Creates an Endpoint for the implementor class and the endpoint invocation is handled by the Invoker. If the bindingId is null and no binding information is specified via the jakarta.xml.ws.BindingType annotation then a default SOAP1.1/HTTP binding MUST be used. The created Endpoint is configured with the web service features.
			</description>
			<location chapter = "6" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6020</id>
			<description>
createAndPublishEndpoint(String address, Object implementor, WebServiceFeature ... features) Same as the above createAndPublishEndpoint() method. The created Endpoint is configured with the web service features
			</description>
			<location chapter = "6" section = "2.2"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JAXWS:SPEC:6008</id>
                    <description>
                        Creating EndpointReferences
                        The Provider class provides the following method to create EndpointReferences                
                        readEndpointReference(javax.xml.transform.Source source) Unmarshalls and returns a jakarta.xml.ws.EndpointReference from the infoset contained in source.   
                    </description>
                    <location chapter="6" section="2.4"/>
                </assertion>  
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="false">
                    <id>JAXWS:SPEC:6017</id>
                    <description>
                        Creating EndpointReferences
                        The Provider class provides the following method to create EndpointReferences                
                        createW3CEndpointReference(String address, QName serviceName, QName portName,
                        List&lt;Element&gt; metadata, String wsdlDocumentLocation, List&lt;Element&gt; 
                        referenceParameters)  Creates W3CEndpointReference using the specified parrameters.                        
                    </description>
                    <location chapter="6" section="2.4"/>
                </assertion>  
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6021</id>
			<description>
createW3CEndpointReference(String address, QName interfaceName, QName serviceName, QName portName, List&lt;Element&gt; metadata, String wsdlDocumentLocation, List&lt;Element&gt; referenceParameters, List&lt;Element&gt; elements, Map&lt;QName, String&gt; attributes) Creates W3CEndpointReference using the specified parameters. This method adds support for extension elements, extension attributes, and porttype name.
			</description>
			<location chapter = "6" section = "2.4"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6009</id>
                    <description>
                        Getting Port Objects:
                        The following method can be used to get a proxy for a Port.
                        getPort(EndpointReference epr,
                        Class&lt;T&gt; sei, 
                        WebServiceFeature... features)  Gets a proxy for the sei that can be used to invoke operations on the endpoint referred to by the epr.  The specified features MUST be enabled/disabled and configured as specified. 
                    </description>
                    <location chapter="6" section="2.5"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6009.1</id>
                            <description>The returned proxy MUST use the epr to determine the endpoint address and any reference parameters that MUST be sent on endpoint invocations.  
                            </description>
                            <location chapter="6" section="2.5"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6009.2</id>
                            <description>The epr MUST NOT be used directly as the value of an WS-Addressing header such as wsa:ReplyTo.
                            </description>
                            <location chapter="6" section="2.5"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6003</id>
			<description>
Conformance (Concretejakarta.xml.ws.spi.ServiceDelegate required): An implementation MUST provide a concrete class that extends jakarta.xml.ws.spi.ServiceDelegate.
			</description>
			<location chapter = "6" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6004</id>
			<description>
Conformance (Protocol specific fault generation): When throwing an exception as the result of a protocol level fault, an implementation MUST ensure that the exception is an instance of the appropriate ProtocolException subclass. For SOAP the appropriate ProtocolException subclass is SOAPFaultException, for XML/HTTP is is HTTPException.
			</description>
			<location chapter = "6" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6005</id>
			<description>
Conformance (Protocol specific fault consumption): When an implementation catches an exception thrown by a service endpoint implementation and the cause of that exception is an instance of the appropriate ProtocolException subclass for the protocol in use, an implementation MUST reflect the information contained in the ProtocolException subclass within the generated protocol level fault.
			</description>
			<location chapter = "6" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:6006</id>
			<description>
Conformance (One-way operations): When sending a one-way message, implementations MUST throw a WebServiceException if any error is detected when sending the message.
			</description>
			<location chapter = "6" section = "4.2"/>
		</assertion>
                <assertion required="false" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6010</id>
                    <description>
                        Conformance (jakarta.xml.ws.WebServiceFeatures): Each derived type of jakarta.xml.ws.WebServiceFeature MUST contain a public static final String ID field that uniquely identifies the feature against all features of all implementations.
                    </description>
                    <location chapter="6" section="5"/>
                </assertion>        
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6011</id>
                    <description>
                        Conformance (enabled property): Each derived type of jakarta.xml.ws.WebServiceFeature MUST provide a constructor argument and/or method to allow the web service developer to set the value of the enabled property.  
                    </description>
                    <location chapter="6" section="5"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6011.1</id>
                            <description>The public default constructor MUST by default set the enabled property to true. 
                            </description>
                            <location chapter="6" section="5"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6011.2</id>
                            <description>An implementation MUST honor the value of the enabled property of any supported WebServiceFeature.
                            </description>
                            <location chapter="6" section="5"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6012</id>
                    <description>
                        jakarta.xml.ws.soap.AddressingFeature feature MUST be supported with the SOAP 1.1/HTTP or SOAP 1.2/HTTP bindings.
                    </description>
                    <location chapter="6" section="5.1"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6012.1</id>
                            <description>Enabling this feature on the server will result in the runtime being capable of consuming and responding to WS-Addressing headers.
                            </description>
                            <location chapter="6" section="5.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6012.2</id>
                            <description>Enabling this feature on the client will cause the JAX-WS runtime to include WS-Addressing headers in SOAP messages as specified by WS-Addressing[33].
                            </description>
                            <location chapter="6" section="5.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6012.3</id>
                            <description>Disabling this feature will prevent a JAX-WS runtime from processing or adding WS-Addressing headers from/to SOAP messages even if the associated WSDL specified otherwise.
                            </description>
                            <location chapter="6" section="5.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6012.4</id>
                            <description>
The AddressingFeature's required property can be configured to control whether all incoming messages MUST contain Addressing headers.
                            </description>
                            <location chapter="6" section="5.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6012.5</id>
                            <description>
The AddressingFeature's responses property can be configured to control
whether the endpoint requires the use of anonymous, non-anonymous and all
responses.
                            </description>
                            <location chapter="6" section="5.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6012.6</id>
                            <description>
This feature is automatically enabled if the WSDL indicates the use of addressing as per the WS-Addressing 1.0 - Metadata[35].
Developers may choose to prevent this from happening by explicitly disabling the AddressingFeature.
                            </description>
                            <location chapter="6" section="5.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6013</id>
                    <description>
                        The abstract EndpointReference class is used by the JAX-WS APIs to reference a particular endpoint in accordance with the W3C Web Services Addressing 1.0 [33].  Each concrete instance of an EndpointReference MUST contain the wsa:Address. 
                    </description>
                    <location chapter="6" section="5.1.1"/>
                    <sub-assertions>
                        <assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6013.1</id>
                            <description>Applications may also use the jakarta.xml.ws.EndpointReference class in method signatures.  
                            </description>
                            <location chapter="6" section="5.1.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6013.2</id>
                            <description>JAXB 2.1 will will bind the EndpointReference base class to xs:anyType. 
                            </description>
                            <location chapter="6" section="5.1.1"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6013.3</id>
                            <description>JAX-WS implementations are required to support the W3CEndpointReference class but they may also provide other EndpointReference subclasses that represent different versions of Addressing. 
                            </description>
                            <location chapter="6" section="5.1.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion> 
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6014</id>
                    <description>
                        The jakarta.xml.ws.W3CEndpointReference class is a concrete implementation of the jakarta.xml.ws.EndpointReference class.
                        The W3CEndpointReference class is a concrete implementation of the jakarta.xml.ws.EndpointReference  class and is used to reference endpoints that are compliant with the W3C Web Services Addressing 1.0 [24] recommendation.
                    </description>
                    <location chapter="6" section="5.1.2"/>
                    <sub-assertions>
                        <assertion required = "false" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:6014.1</id>
                            <description>If an associated WSDL is available, then the  W3CEndpointReference SHOULD contain the WSDL in the wsa:MetaData.
                            </description>
                            <location chapter="6" section="5.1.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:6014.2</id>
                            <description>When creating an W3CEndpointReference, it MUST contain the wsam:ServiceName element with the wsam:EndpointName attribute on the wsa:Metadata. 
                            </description>
                            <location chapter="6" section="5.1.2"/>
                        </assertion>
                        <assertion required = "false" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:6014.3</id>
                            <description>The wsam:InterfaceName MAY be present.  
                            </description>
                            <location chapter="6" section="5.1.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6014.4</id>
                            <description>Applications may use this class to pass EndpointReferences as method parameters or return types. 
                            </description>
                            <location chapter="6" section="5.1.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6014.5</id>
                            <description>JAXB 2.1 will bind the W3CEndpointReference class to the W3C EndpointReference XML Schema in the WSDL. 
                            </description>
                            <location chapter="6" section="5.1.2"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6015</id>
                    <description>Conformance (jakarta.xml.ws.soap.MTOMFeature): An implementation MUST support the jakarta.xml.ws.soap.MTOMFeature and its threshold property.
                    </description>
                    <location chapter="6" section="5.2"/>
                    <sub-assertions>
                        <assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.1</id>
                            <description>This feature should be used instead of the jakarta.xml.ws.soap.SOAPBinding.SOAP11HTTP_MTOM_BINDING, jakarta.xml.ws.soap.SOAPBinding.SOAP12HTTP_MTOM_BINDING and the jakarta.xml.ws.soap.SOAPBinding.setMTOMEnabled().
                            </description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.2</id>
                            <description>This feature MUST be supported with the SOAP 1.1/HTTP or SOAP 1.2/HTTP bindings.
                            </description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.4</id>
                            <description>The MTOMFeature has one property threshold, that can be configured to control which binary data should be XOP encoded. 
                            </description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.3</id>
                            <description>Enabling this feature on either the server or client will result the JAX-WS runtime using MTOM and any binary data being XOP encoded.
                            </description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.5</id>
                            <description>The threshold is the size in bytes that binary data MUST be in order to be XOP encoded.  
                            </description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.6</id>
                            <description>The threshold MUST not be negative. </description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6015.7</id>
                            <description>The default value is 0.</description>
                            <location chapter="6" section="5.2"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:6016</id>
                    <description>
                        Conformance (jakarta.xml.ws.RespectBindingFeature):  When the jakarta.xml.ws.RespectBindingFeature is enabled, a JAX-WS implementation MUST inspect the wsdl:binding at runtime to determine result and parameter bindings as well as any wsdl:extensions that have the required=true attribute.  
                    </description>
                    <location chapter="6" section="5.3"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6016.1</id>
                            <description>All required wsdl:extensions MUST be supported and honored by a JAX-WS implementation unless a specific wsdl:extension has be explicitly disabled via a WebServiceFeature. 
                            </description>
                            <location chapter="6" section="5.3"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:6016.2</id>
                            <description>
When this feature is enabled, a JAX-WS implementation must support and
honor the addressing policy, if specified, in the WSDL. However, such
addressing requirements can be explicitly disabled via AddressingFeature.
                            </description>
                            <location chapter="6" section="5.3"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:6023</id>
			<description>
Conformance (HTTP SPI in SE platform): A JAX-WS 2.2 implementation in Java SE platform MUST support Endpoint.publish(jakarta.xml.ws.spi.http.HttpContext).
			</description>
			<location chapter = "6" section = "6"/>
		</assertion>
                
