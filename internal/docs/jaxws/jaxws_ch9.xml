<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

        <!-- Chapter 9 Handler Framework -->
        <!-- next available id is 9043 -->
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>JAXWS:SPEC:9000</id>
            <description>Logical handlers are protocol agnostic and are unable to affect protocol specific parts of a message.</description>
            <location chapter="9" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9001</id>
            <description>Protocol handlers are specific to a particular protocol and may access and change protocol specific aspects of a message.</description>
            <location chapter="9" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9002</id>
            <description>All binding implementations MUST support logical handlers being deployed in their handler chains.</description>
            <location chapter="9" section="1.2.1"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>JAXWS:SPEC:9003</id>
            <description>Binding implementations MAY support other handler types being deployed in their handler chains.</description>
            <location chapter="9" section="1.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>JAXWS:SPEC:9004</id>
            <description>An implementation MUST throw WebServiceException when at the time a binding provider is created, the handler chain returned by the configured HandlerResolver contains an incomppatible handler.
                </description>
            <location chapter="9" section="1.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="true" defined-by="technology"
                   status="active" testable="false">
            <id>JAXWS:SPEC:9005</id>
            <description>Implementation MUST throw WebServiceException when attempting to confugure an incompatible handler using the Binding.setHandlerChain method.  </description>
            <location chapter="9" section="1.2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9006</id>
            <description>Changing the handler resolver configured for a Service instance MUST NOT affect the handlers on previously created proxies, or Dispatch instances.  </description>
            <location chapter="9" section="2.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9007</id>
            <description>The handler chain for a binding is constructed by starting with the handler chain as returned by the HandlerResolver for the service in use and sorting its elements so that all logical handlers precede all protocol handlers.</description>
            <location chapter="9" section="2.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
            <id>JAXWS:SPEC:9008</id>
            <description>When used in conunction with JAX-WS, the name element of the HandlerChain annotation, if present, MUST have the default value (the empty string).</description>
            <location chapter="9" section="2.1.3"/>
        </assertion>
      <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="false">
            <id>JAXWS:SPEC:9009</id>
            <description>HandlerChain annotation</description>
            <location chapter="9" section="2.1.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JAXWS:SPEC:9009.1</id>
                    <description>An implementation MUST support using the HandlerChain annotation on an endpoint implementation class</description>
                    <location chapter="9" section="2.1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JAXWS:SPEC:9009.2</id>
                    <description>An implementation MUST support using the HandlerChain annotation on a provider</description>
                    <location chapter="9" section="2.1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JAXWS:SPEC:9009.3</id>
                    <description>An implementation MUST support using the HandlerChain annotation on an endpoint interface</description>
                    <location chapter="9" section="2.1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
                    <id>JAXWS:SPEC:9009.4</id>
                    <description>An implementation MUST support using the HandlerChain annotation on a generated service class</description>
                    <location chapter="9" section="2.1.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                          status="active" testable="false">
            <id>JAXWS:SPEC:9010</id>
            <description>For a generated service class which is annotated with a HandlerChain annotation, the default handler resolver MUST return handler chains consistent with the contents of the handler chain descriptor referenced by the HandlerChain annotation.</description>
            <location chapter="9" section="2.1.3"/>
        </assertion>        
        
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9011</id>
            <description>Changing the handler chain on a Binding instance MUST NOT cause any change to the handler chains configured on the Service instance used to create the Binding instance.</description>
            <location chapter="9" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9012</id>
            <description>After injection has been completed, an implementation MUST call the lifecycle method annotated with PostConstruct, if present, prior to invoking any other method on a handler instance.</description>
            <location chapter="9" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="false">
            <id>JAXWS:SPEC:9013</id>
            <description>In a managed environment, prior to releasing a handler instance, an implementation MUST call the lifecycle method annotated with PreDestroy method, if present, on any Handler instances which it instantiated.</description>
            <location chapter="9" section="3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9014</id>
            <description>For outbound messages handler processing starts with the first handler in the chain and proceeds in the same order as the handler chain. For inbound messages the order of processing is reversed: processing starts with the last handler in the chain and proceeds in the reverse order of the handler chain.</description>
            <location chapter="9" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9015</id>
            <description>handleMessage</description>
            <location chapter="9" section="3.2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9015.1</id>
                    <description>Return true This indicates that normal message processing should continue. The runtime invokes handleMessage on the next handler or dispatches the message if there are no further handlers.</description>
                    <location chapter="9" section="3.2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9015.2</id>
                    <description>Return false This indicates that normal message processing should cease.</description>
                    <location chapter="9" section="3.2.1"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false"
                                   defined-by="technology" status="active"
                                   testable="true">
                            <id>JAXWS:SPEC:9015.2.1</id>
                            <description>Response The message direction is reversed, the runtime invokes handleMessage on the next handler or dispatches the message if there are no further handlers.</description>
                            <location chapter="9" section="3.2.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false"
                                   defined-by="technology" status="active"
                                   testable="true">
                            <id>JAXWS:SPEC:9015.2.2</id>
                            <description>No response Normal message processing stops, close is called on each previously invoked handler in the chain, the message is dispatched.</description>
                            <location chapter="9" section="3.2.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9015.3</id>
                    <description>Throw ProtocolException or a subclass This indicates that normal message processing should cease.</description>
                    <location chapter="9" section="3.2.1"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false"
                                   defined-by="technology" status="active"
                                   testable="true">
                            <id>JAXWS:SPEC:9015.3.1</id>
                            <description>Response Normal message processing stops, fault message processing starts. The message direction is reversed, if the message is not already a fault message then it is replaced with a fault message, and the runtime invokes handleFault on the next handler or dispatches the message if there are no further handlers.</description>
                            <location chapter="9" section="3.2.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false"
                                   defined-by="technology" status="active"
                                   testable="true">
                            <id>JAXWS:SPEC:9015.3.2</id>
                            <description>No response Normal message processing stops, close is called on each previously invoked handler in the chain, the exception is dispatched.</description>
                            <location chapter="9" section="3.2.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion>

                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9015.4</id>
                    <description>Throw any other runtime exception This indicates that normal message processing should cease.</description>
                    <location chapter="9" section="3.2.1"/>
                    <sub-assertions>
                        <assertion required="true" impl-spec="false"
                                   defined-by="technology" status="active"
                                   testable="true">
                            <id>JAXWS:SPEC:9015.4.1</id>
                            <description>Response Normal message processing stops, close is called on each previously invoked handler in the chain, the message direction is reversed, and the exception is dispatched.</description>
                            <location chapter="9" section="3.2.1"/>
                        </assertion>
                        <assertion required="true" impl-spec="false"
                                   defined-by="technology" status="active"
                                   testable="true">
                            <id>JAXWS:SPEC:9015.4.2</id>
                            <description>No response Normal message processing stops, close is called on each previously invoked handler in the chain, the exception is dispatched.</description>
                            <location chapter="9" section="3.2.1"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9016</id>
            <description>handleFault Called for fault message processing</description>
            <location chapter="9" section="3.2.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9016.1</id>
                    <description>Return true This indicates that fault message processing should continue. The runtime invokes handle Fault on the next handler or dispatches the fault message if there are no further handlers.</description>
                    <location chapter="9" section="3.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9016.2</id>
                    <description>Return false This indicates that fault message processing should cease. Fault message processing stops, close is called on each previously invoked handler in the chain, the fault message is dispatched.</description>
                    <location chapter="9" section="3.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9016.3</id>
                    <description>Throw ProtocolException or a subclass This indicates that fault message processing should cease. Fault message processing stops, close is called on each previously invoked handler in the chain, the exception is dispatched.</description>
                    <location chapter="9" section="3.2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>JAXWS:SPEC:9016.4</id>
                    <description>Throw any other runtime exception This indicates that fault message processing should cease. Fault message processing stops, close is called on each previously invoked handler in the chain, the exception is dispatched.</description>
                    <location chapter="9" section="3.2.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9017</id>
            <description>Invoking close: At the conclusion of an MEP, an implementation MUST call the close method of each handler that was previously invoked during that MEP via either handleMessage or handleFault.</description>
            <location chapter="9" section="3.2.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9018</id>
            <description>Conformance (Order of close invocations): Handlers are invoked in the reverse order in which they were first invoked to handle a message according to the rules for normal message processing </description>
            <location chapter="9" section="3.2.3"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9019</id>
            <description>Handler instances may be pooled by a JAX-WS runtime system.</description>
            <location chapter="9" section="3.3"/>
        </assertion>
        <assertion required="false" impl-spec="true" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9020</id>
            <description>JAX-WS bindings may define a message context subtype for their particular protocol binding that provides access to protocol specific features.</description>
            <location chapter="9" section="4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="removed" testable="true">
            <id>JAXWS:SPEC:9021</id>
            <description>MessageContext is the super interface for all JAX-WS message contexts. It extends Map&lt;String,Object&gt; with additional methods and constants to manage a set of properties that enable handlers in a handler chain to share processing related state.</description>
            <location chapter="9" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
            <id>JAXWS:SPEC:9022</id>
            <description>Properties are scoped as either APPLICATION or HANDLER. All properties are available to all handlers for an instance of an MEP on a particular endpoint.  </description>
            <location chapter="9" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                                   status="active" testable="true">
            <id>JAXWS:SPEC:9023</id>
            <description>All properties are available to all handlers for an instance of an MEP on a particular endpoint.</description>
            <location chapter="9" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                                   status="active" testable="true">
            <id>JAXWS:SPEC:9024</id>
            <description>The defaultscope for a property is HANDLER</description>
            <location chapter="9" section="4.1"/>
        </assertion>         
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9025</id>
            <description>Properties in a message context MUST be shared across all handler invocations for a particular instance of an MEP on any particular endpoint.</description>
            <location chapter="9" section="4.1"/>
        </assertion>

        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9026</id>
            <description>jakarta.xml.ws.handler.message.outbound Specifies the message direction: true for outbound messages, false for inbound messages.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9027</id>
            <description>jakarta.xml.ws.binding.attachments A map of attachments to a message.  The key is a unique identifier for the attachment. The value is a DataHandler for the attachment data.Bindings describe how to carry attachments with messages. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>
        
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9028</id>
            <description>jakarta.xml.ws.wsdl.description   A resolvable URI that may be used to obtain access to the WSDL for the endpoint.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>
        
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9029</id>
            <description>jakarta.xml.ws.wsdl.service The name of the service being invoked in the WSDL.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>        
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9030</id>
            <description>jakarta.xml.ws.wsdl.port The name of the port over which the current message was received in the WSDL. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9031</id>
            <description>jakarta.xml.ws.wsdl.interface The name of the interface (WSDL 2.0) or port type (WSDL 1.1) to which the current message belongs. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>    
        <assertion required="false" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9032</id>
            <description>jakarta.xml.ws.wsdl.operation The name of the WSDL operation to which the current message belongs.  For WSDL 2.0 this is the operation component designator. For WSDL 1.1 the namespace is the target namespace of the WSDL definitions element. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>        
        
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9033</id>
            <description>jakarta.xml.ws.http.request.headers A map of the HTTP headers for the request message. The key is the header name. The value is a list of values for that header.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>            
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9034</id>
            <description>jakarta.xml.ws.http.request.method The HTTP method for the request message.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>        
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9035</id>
            <description>jakarta.xml.ws.http.response.headers  A map of the HTTP headers for the response message. The key is the header name. The value is a list of values for that header. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>        
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9036</id>
            <description>jakarta.xml.ws.http.response.code  The HTTP response status code.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>            
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9037</id>
            <description>jakarta.xml.ws.servlet.context The ServletContext object belonging to the web application that contains the endpoint. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9038</id>
            <description>jakarta.xml.ws.servlet.request The HttpServletRequest object associated with the request currently being served.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>        
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9039</id>
            <description>jakarta.xml.ws.servlet.response The HttpServletResponse object associated with the request currently being served.</description>
            <location chapter="9" section="4.1.1"/>
        </assertion>    
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9040</id>
            <description>jakarta.xml.ws.servlet.session The HttpSession associated with the request currently being served. </description>
            <location chapter="9" section="4.1.1"/>
        </assertion>   
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9042</id>
            <description>
                 Handler Framework, Standard Message Context Properties
            </description>
            <location chapter="9" section="4.1.1"/>
            <sub-assertions>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:9042.1</id>
			<description><br/>
                        Add the jakarta.xml.ws.reference.parameters property to Table 9.2.<br/>
                        <br/>
                        Name  jakarta.xml.ws.reference.parameters<br/>
                        Type  List&lt;Element&gt;<br/>
                        Mandatory Y<br/>
                        Description  A list of WS Addressing headers marked with the wsa:IsReferenceParameter=true attribute.<br/>
                        <br/>
			</description>
			<location chapter="9" section="4.1.1"/>
		</assertion>                
            </sub-assertions>
        </assertion>          
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>JAXWS:SPEC:9041</id>
            <description>Handlers may manipulate the values and scope of properties within the message context as desired.</description>
            <location chapter="9" section="4.3"/>
        </assertion>
